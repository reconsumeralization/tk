import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split


class DataAnalyzer:
    def __init__(self):
        self.model = LinearRegression()

    def analyze_data(self, data):
        return data.describe()

    def train_model(self, X, y):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        self.model.fit(X_train, y_train)
        predictions = self.model.predict(X_test)
        return mean_squared_error(y_test, predictions)

    def predict_data(self, X):
        return self.model.predict(X)


def test_analyze_data():
    data = pd.DataFrame({
        'A': [1, 2, 3, 4, 5],
        'B': [2, 3, 4, 5, 6],
        'C': [3, 4, 5, 6, 7]
    })
    analyzer = DataAnalyzer()
    result = analyzer.analyze_data(data)
    assert result['A']['mean'] == 3.0
    assert result['B']['mean'] == 4.0
    assert result['C']['mean'] == 5.0

def test_train_model():
    data = pd.DataFrame({
        'A': [1, 2, 3, 4, 5],
        'B': [2, 3, 4, 5, 6]
    })
    X = data[['A']]
    y = data['B']
    analyzer = DataAnalyzer()
    mse = analyzer.train_model(X, y)
    assert mse < 1e-6

def test_predict_data():
    data = pd.DataFrame({
        'A': [1, 2, 3, 4, 5],
        'B': [2, 3, 4, 5, 6]
    })
    X = data[['A']]
    y = data['B']
    analyzer = DataAnalyzer()
    analyzer.train_model(X, y)
    predictions = analyzer.predict_data(X)
    assert np.allclose(predictions, y)
